<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Corvus.Json.JsonReference</name>
    </assembly>
    <members>
        <member name="T:Corvus.Json.JsonPointerUtilities">
            <summary>
            Utility function to resolve the JsonElement referenced by a json pointer into a json element.
            </summary>
            <remarks>
            Note that we don't support <c>$anchor</c> or <c>$id</c> with this implementation.
            </remarks>
        </member>
        <member name="F:Corvus.Json.JsonPointerUtilities.EmptyPointer">
            <summary>
            Gets an empty pointer.
            </summary>
        </member>
        <member name="T:Corvus.Json.JsonPointerUtilities.SegmentHandler`1">
            <summary>
            A callback for a segment handler in pointer resolution.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="isLastSegment"><see langword="true"/> if this is the last segment, otherwise <see langword="false"/>.</param>
            <param name="segment">The current segment.</param>
            <param name="element">The element for the current segment.</param>
            <param name="state">The state for the segment handler.</param>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.ResolvePointer(System.Text.Json.JsonDocument,System.ReadOnlySpan{System.Char})">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root document from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.ResolvePointer(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char})">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.Text.Json.JsonDocument,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root document from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer``1(System.Text.Json.JsonDocument,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@,Corvus.Json.JsonPointerUtilities.SegmentHandler{``0},``0@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="root">The root document from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <param name="handleSegment">A callback for each segment found during resolution.</param>
            <param name="state">The state for the segment handler.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer``1(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Nullable{System.Text.Json.JsonElement}@,Corvus.Json.JsonPointerUtilities.SegmentHandler{``0},``0@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="element">The element found at the given location.</param>
            <param name="handleSegment">A callback for each segment found during resolution.</param>
            <param name="state">The state for the segment handler.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.EncodePointer(System.ReadOnlySpan{System.Char},System.Span{System.Char}@)">
            <summary>
            Encodes the ~ encoding in a pointer.
            </summary>
            <param name="unencodedFragment">The encoded fragment.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.DecodeHexPointer(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
            Decodes the hex encoding in a reference.
            </summary>
            <param name="encodedFragment">The encoded reference.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.DecodePointer(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
            <summary>
            Decodes the ~ encoding in a reference.
            </summary>
            <param name="encodedFragment">The encoded reference.</param>
            <param name="fragment">The span into which to write the result.</param>
            <returns>The length of the decoded reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryGetLineAndOffsetForPointer(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Int32@,System.Int32@,System.Int64@)">
            <summary>
            Get s the line and offset for the pointer in the input.
            </summary>
            <param name="utf8Input">The UTF8 input text.</param>
            <param name="fragment">The fragment for the JSON pointer.</param>
            <param name="line">If the pointer was successfully resolved, this is the line in the input text.</param>
            <param name="chars">If the pointer was successfully resolved, this is the character offset in the line.</param>
            <param name="lineOffset">If the pointer was successfully resolved, this is the total offset to the start of the line in the input text.</param>
            <returns><see langword="true"/> if the pointer was successfully resolved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryGetLineAndOffsetForPointer(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Text.Json.JsonReaderOptions,System.Int32@,System.Int32@,System.Int64@)">
            <summary>
            Gets the line and offset for the pointer in the input.
            </summary>
            <param name="utf8Input">The UTF8 input text.</param>
            <param name="fragment">The fragment for the JSON pointer.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonReaderOptions"/>.</param>
            <param name="line">If the pointer was successfully resolved, this is the line in the input text.</param>
            <param name="chars">If the pointer was successfully resolved, this is the character offset in the line.</param>
            <param name="lineOffset">If the pointer was successfully resolved, this is the total offset to the start of the line in the input text.</param>
            <returns><see langword="true"/> if the pointer was successfully resolved.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean,System.Int64@,System.Text.Json.JsonReaderOptions)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="input">The UTF8 input bytes.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="throwOnFailure">If true, we throw on failure.</param>
            <param name="offset">The element found at the given location.</param>
            <param name="options">The JSON reader options.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Boolean,System.Nullable{System.Text.Json.JsonElement}@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="throwOnFailure">If true, we throw on failure.</param>
            <param name="element">The element found at the given location.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="M:Corvus.Json.JsonPointerUtilities.TryResolvePointer``1(System.Text.Json.JsonElement,System.ReadOnlySpan{System.Char},System.Boolean,System.Nullable{System.Text.Json.JsonElement}@,Corvus.Json.JsonPointerUtilities.SegmentHandler{``0},``0@)">
            <summary>
            Resolve a json element from a fragment pointer into a json document.
            </summary>
            <typeparam name="TState">The type of the state for the segment handler.</typeparam>
            <param name="root">The root element from which to start resolving the pointer.</param>
            <param name="fragment">The fragment in <c>#/blah/foo/3/bar/baz</c> form.</param>
            <param name="throwOnFailure">If true, we throw on failure.</param>
            <param name="element">The element found at the given location.</param>
            <param name="handleSegment">A callback for each segment found during resolution.</param>
            <param name="state">The state for the segment handler.</param>
            <returns><c>true</c> if the element was found.</returns>
        </member>
        <member name="T:Corvus.Json.JsonReference">
            <summary>
            A JSON $ref as a URI or JsonPointer.
            </summary>
        </member>
        <member name="F:Corvus.Json.JsonReference.RootFragment">
            <summary>
            Gets a reference to the root fragment.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="uri">The uri component of the reference without a fragment.</param>
            <param name="fragment">The fragment component of the reference.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.ReadOnlyMemory{System.Char},System.ReadOnlyMemory{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="baseUri">The base Uri component of the reference.</param>
            <param name="fragment">The fragment component of the reference.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="uri">The uri component of the reference.</param>
            <param name="pointer">The pointer component of the reference.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.#ctor(System.ReadOnlyMemory{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReference"/> struct.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="P:Corvus.Json.JsonReference.HasAbsoluteUri">
            <summary>
            Gets a value indicating whether the ref has an absolute uri.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.HasFragment">
            <summary>
            Gets a value indicating whether the ref has a fragment.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.HasUri">
            <summary>
            Gets a value indicating whether the ref has an uri.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.Uri">
            <summary>
            Gets the URI without the fragment.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.Fragment">
            <summary>
            Gets the fragment including the leading #.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReference.IsImplicitFile">
            <summary>
            Gets a value indicating whether this is an implicit file reference.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Implicit(Corvus.Json.JsonReference)~System.String">
            <summary>
            Implicit conversion from a string.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Explicit(System.Nullable{Corvus.Json.JsonReference})~System.String">
            <summary>
            Implicit conversion from a string.
            </summary>
            <param name="reference">The reference as a string.</param>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Equality(Corvus.Json.JsonReference,Corvus.Json.JsonReference)">
            <summary>
            Equality operator.
            </summary>
            <param name="left">The lhs of the comparison.</param>
            <param name="right">The rhs of the comparison.</param>
            <returns><c>True</c> if the left equals the right.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.op_Inequality(Corvus.Json.JsonReference,Corvus.Json.JsonReference)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left">The lhs of the comparison.</param>
            <param name="right">The rhs of the comparison.</param>
            <returns><c>True</c> if the left does not equals the right.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.FromUriAndUnencodedPropertyName(System.String,System.String)">
            <summary>
            Create a reference from a URI and an unencoded property name.
            </summary>
            <param name="uri">The base URI.</param>
            <param name="unencodedPropertyName">The unencoded property name.</param>
            <returns>The new <see cref="T:Corvus.Json.JsonReference"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.FromEncodedJsonString(System.String)">
            <summary>
            Create a reference from a potentially encoded source (such as an external JSON document).
            </summary>
            <param name="referenceOrNull">The string from which to construct <see cref="T:Corvus.Json.JsonReference"/>.</param>
            <returns>The new <see cref="T:Corvus.Json.JsonReference"/>.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.CompareTo(Corvus.Json.JsonReference)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.AsDecodedString">
            <summary>
            Get the value as decoded string.
            </summary>
            <returns>The value with encodings replaced.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.WithFragment(System.String)">
            <summary>
            Replace the fragment in the reference.
            </summary>
            <param name="fragment">The fragment to replace.</param>
            <returns>A JSON reference with the same uri up to and including path and query, but with a different fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AppendFragment(Corvus.Json.JsonReference)">
            <summary>
            Append the fragment.
            </summary>
            <param name="other">The item whose fragment is to be appended.</param>
            <returns>The JSON reference with the compound fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AppendArrayIndexToFragment(System.Int32)">
            <summary>
            Append an array index to the fragment in the reference.
            </summary>
            <param name="index">The array index to append.</param>
            <returns>A JSON reference with the encoded fragment appended.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AppendUnencodedPropertyNameToFragment(System.String)">
            <summary>
            Append an unencoded JSON property name to the fragment in the reference.
            </summary>
            <param name="unencodedPropertyName">The name to append.</param>
            <returns>A JSON reference with the encoded fragment appended.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AppendUnencodedPropertyNameToFragment(System.ReadOnlySpan{System.Char})">
            <summary>
            Append an unencoded JSON property name to the fragment in the reference.
            </summary>
            <param name="unencodedPropertyName">The name to append.</param>
            <returns>A JSON reference with the encoded fragment appended.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.AsBuilder">
            <summary>
            Gets a reference builder for this reference.
            </summary>
            <returns>The <see cref="T:Corvus.Json.JsonReferenceBuilder"/> that gives access to the components of the reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.Equals(Corvus.Json.JsonReference)">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReference.MoveToParentFragment">
            <summary>
            Moves to the parent fragment if available.
            </summary>
            <returns>A JsonReference pointing at the parent fragment, or the original reference if there is no fragment.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.Apply(Corvus.Json.JsonReference,System.Boolean)">
            <summary>
            Combine this Json reference with another using the rules in rfc3986 (https://tools.ietf.org/html/rfc3986#section-5.2.2).
            </summary>
            <param name="other">The reference with which to combine.</param>
            <param name="strict">Whether to be 'strict' in the sense of rc3986.</param>
            <returns>The combined reference.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReference.MakeRelative(Corvus.Json.JsonReference@)">
            <summary>
            Makes a relative reference from an absolute base reference and an absolute target reference.
            </summary>
            <param name="other">The target reference.</param>
            <returns>A reference relative to the base reference.</returns>
            <exception cref="T:System.InvalidOperationException">One of the references was not absolute.</exception>
        </member>
        <member name="T:Corvus.Json.JsonReferenceBuilder">
            <summary>
            A decomposed JsonReference to help you build / deconstruct references.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Corvus.Json.JsonReferenceBuilder"/> struct.
            </summary>
            <param name="scheme">The scheme.</param>
            <param name="authority">The authority.</param>
            <param name="path">The path.</param>
            <param name="query">The query.</param>
            <param name="fragment">The fragment.</param>
            <remarks>
            A builder/deconstructor for a JsonReference.
            <code>
            <![CDATA[
                foo://example.com:8042/over/there?name=ferret#nose
                \_/   \______________/\_________/ \_________/ \__/
                 |           |            |            |        |
               scheme     authority     path          query  fragment
            ]]>
            </code>
            </remarks>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Scheme">
            <summary>
            Gets the scheme.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasScheme">
            <summary>
            Gets a value indicating whether the reference has a scheme component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Authority">
            <summary>
            Gets the authority.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasAuthority">
            <summary>
            Gets a value indicating whether the reference has an authority component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasPath">
            <summary>
            Gets a value indicating whether the reference has a path component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasQuery">
            <summary>
            Gets a value indicating whether the reference has a query component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Fragment">
            <summary>
            Gets the fragment.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.HasFragment">
            <summary>
            Gets a value indicating whether the reference has a query component.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Host">
            <summary>
            Gets the host.
            </summary>
        </member>
        <member name="P:Corvus.Json.JsonReferenceBuilder.Port">
            <summary>
            Gets the port.
            </summary>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.From(System.String)">
            <summary>
            Gets a reference builder from a reference.
            </summary>
            <param name="reference">The reference from which to create the builder.</param>
            <returns>A <see cref="T:Corvus.Json.JsonReferenceBuilder"/> initialized from the given string.</returns>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Corvus.Json.JsonReferenceBuilder.AsReference">
            <summary>
            Gets the JsonReference corresponding to this builder.
            </summary>
            <returns>The <see cref="T:Corvus.Json.JsonReference"/> built from this builder.</returns>
        </member>
    </members>
</doc>
